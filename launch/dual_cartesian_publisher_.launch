<launch>

    <!-- This argument defines the workspace -->
    <arg name="ns1" default="left"/>
    <arg name="ns2" default="right"/>

    <!-- Load robot_description to parameter server --> 
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find aescape_panda_simulator)/urdf/dual_panda_arm.urdf.xacro' load_gazebo:=true robot_1:=$(arg ns1) robot_2:=$(arg ns2)"/> 

    <!-- Left: Load robot_description to parameter server -->
    <param  name="$(arg ns1)/robot_description" command="$(find xacro)/xacro --inorder '$(find aescape_panda_simulator)/urdf/panda_arm.urdf.xacro' load_gazebo:=true robot_name:=$(arg ns1) origin_y:=-0.5"/>

    <!-- Right: Load robot_description to parameter server -->
    <param  name="$(arg ns2)/robot_description" command="$(find xacro)/xacro --inorder '$(find aescape_panda_simulator)/urdf/panda_arm.urdf.xacro' load_gazebo:=true robot_name:=$(arg ns2) origin_y:=0.5"/>


    <!-- Simulator -->

    <!-- We resume the logic in empty_world.launch, changing the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">

        <arg name="world_name" value="$(find aescape_panda_simulator)/worlds/panda.world"/>
        <arg name="paused" value="true"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="true"/>
        <arg name="recording" value="false"/>
        <arg name="debug" value="false"/>
        <arg name="verbose" value="false"/>

    </include>

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" 
        pkg="gazebo_ros" 
        type="spawn_model" 
        respawn="false" 
        output="screen"
        args="-urdf -model aescape -param robot_description 
        -J $(arg ns1)_joint1  0.000 
        -J $(arg ns1)_joint2 -0.500 
        -J $(arg ns1)_joint3  0.000
        -J $(arg ns1)_joint4 -2.000 
        -J $(arg ns1)_joint5  0.000
        -J $(arg ns1)_joint6  1.500
        -J $(arg ns1)_joint7  0.000 
        -J $(arg ns2)_joint1  0.000 
        -J $(arg ns2)_joint2 -0.500 
        -J $(arg ns2)_joint3  0.000
        -J $(arg ns2)_joint4 -2.000 
        -J $(arg ns2)_joint5  0.000
        -J $(arg ns2)_joint6  1.500
        -J $(arg ns2)_joint7  0.000 -unpause"/>


    <!-- Controller -->

    <!-- Load controller configuration -->
    <rosparam   file="$(find aescape_panda_simulator)/config/controllers.yaml" command="load"/>

    <!-- Left: Load the controller_spawner -->
    <node   name="controller_spawner" 
            pkg="controller_manager" 
            type="spawner" 
            respawn="false"
            output="screen" 
            ns="$(arg ns1)"
            args="cartesian_motion_controller joint_state_controller"/> 
            
    <!-- Right: Load the controller_spawner -->
    <node   name="controller_spawner" 
            pkg="controller_manager" 
            type="spawner" 
            respawn="false"
            output="screen" 
            ns="$(arg ns2)"
            args="cartesian_motion_controller joint_state_controller"/>
    

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen"/>

    <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
        <rosparam param="source_list">[left/joint_states, right/joint_states] </rosparam>
        <param name="rate" value="30"/>
        <param name="use_gui" value="false"/>
    </node>


    <!-- Launch visualization in rviz -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find aescape_panda_simulator)/config/single_urdf.rviz" required="true" />

    <!-- Starting DualCartesianMotionController_publisher -->
    <node   name="DualCartesianMotionController_publisher" 
            pkg="aescape_panda_simulator" 
            type="DualCartesianMotionController_publisher"
            output="screen">
    </node>

</launch>

